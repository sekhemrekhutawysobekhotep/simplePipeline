# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'f6574427-40e1-433e-8d97-dd5ef391af9a'
  imageRepository: 'sekhemrebarebonettth002'  #  repository name must be lowercase
  containerRegistry: 'stenscontainerregistrycairo.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/barebone/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  tag_latest: 'latest'
  did_docker_pull_succeed: true

stages:
- stage: Build
  displayName: login to docker registry and docker pull image
  jobs:
  - job: LoginContainerRegistryDockerPullImage
    displayName: login to docker registry
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Login to ACR and run something
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - bash: |
        echo
        echo "before doing anything value of did_docker_pull_succeed is $(did_docker_pull_succeed)"
        echo
        echo "docker pull  $(containerRegistry)/$(imageRepository):$(tag_latest) "
              docker pull  $(containerRegistry)/$(imageRepository):$(tag_latest)      || {   # ... catch error

          resp_code=$?
          echo
          echo "NOTICE - docker pull  $(containerRegistry)/$(imageRepository):$(tag_latest)   failed so lets build the image"

          did_docker_pull_succeed = false
          echo
          echo "OK so just set to false variable did_docker_pull_succeed  -->$(did_docker_pull_succeed)<--"
          echo
        }
        echo
        echo "afterward value of did_docker_pull_succeed is -->$(did_docker_pull_succeed)<-- "
        echo
        return 0  #  give a good return code since we use variable did_docker_pull_succeed to communicate onward



  - job: BuildDockerImageConditionally
    pool:
      vmImage: $(vmImageName)
    dependsOn: LoginContainerRegistryDockerPullImage
    condition: failed() # this job will only run if LoginContainerRegistryDockerPullImage failed
    displayName: if docker image does not exist then build it
    # pool:
    #   vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry bare bone
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          $(tag_latest)

  - job: DockerRunImage
    dependsOn: BuildDockerImageConditionally
    condition: succeededOrFailed() # wait for BuildDockerImageConditionally then run
    displayName: run binary inside docker container
    steps:
    - task: Docker@2
      displayName: Login to ACR and run something
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - bash: |
        echo "I can run inside the container (it starts by default)"
        echo hello World
        echo
        # echo "here is value of did_docker_pull_succeed using bash syntax $did_docker_pull_succeed "
        echo "here is value of did_docker_pull_succeed using MS syntax  $(did_docker_pull_succeed)"
        echo
        echo "ls -la /root/"
        echo
        echo "docker pull  $(containerRegistry)/$(imageRepository):$(tag_latest) "
              docker pull  $(containerRegistry)/$(imageRepository):$(tag_latest)

        echo "below is not showing output of shell execution"
        echo "docker run  $(containerRegistry)/$(imageRepository):$(tag_latest) /root/theAnswerIs.sh "
              docker run  $(containerRegistry)/$(imageRepository):$(tag_latest) /root/theAnswerIs.sh
        echo
        echo "so lets see if below shows or not its using a -ti so does it"
        echo
        echo "docker run -ti $(containerRegistry)/$(imageRepository):$(tag_latest) /root/theAnswerIs.sh "
              docker run -ti  $(containerRegistry)/$(imageRepository):$(tag_latest) /root/theAnswerIs.sh
        echo
        echo "hello Corinde "
